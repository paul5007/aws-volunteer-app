{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "DatabaseTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-DatabaseTest"
      }
    },
    "EventCreateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-EventCreate"
      }
    },
    "EventReadLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-EventRead"
      }
    },
    "EventReadAllLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-EventReadAll"
      }
    },
    "RoleCreateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-RoleCreate"
      }
    },
    "RoleListForEventLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-RoleListForEvent"
      }
    },
    "RoleReadAllForUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-RoleReadAllForUser"
      }
    },
    "UserCreateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-UserCreate"
      }
    },
    "UserLoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-UserLogin"
      }
    },
    "UserReadLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ChurchAppAPI-dev-UserRead"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "ChurchAppAPI-dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChurchAppAPI-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChurchAppAPI-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "ChurchAppAPI-dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "DatabaseTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/DatabaseTest.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-DatabaseTest",
        "Handler": "DatabaseTest/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 1,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3"
        ]
      },
      "DependsOn": [
        "DatabaseTestLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DatabaseTestLambdaVersionTbZOX9PJNgazTm4l6LtOVzKJxAhCVnGqqbMY2sYR0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DatabaseTestLambdaFunction"
        },
        "CodeSha256": "b0HDGceLvmVKXdt78eVNz3gVz+yxWqCAid2isedjjiE="
      }
    },
    "EventCreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/EventCreate.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-EventCreate",
        "Handler": "EventCreate/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 1,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3"
        ]
      },
      "DependsOn": [
        "EventCreateLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "EventCreateLambdaVersionr2gNz2h0NbPbFW6PVlyQrfOek3et4QaeebQlePTtOJs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EventCreateLambdaFunction"
        },
        "CodeSha256": "EmhWoEA5QFNtM7+impMDDqWak6iw1pn+PsluaBdv5pk="
      }
    },
    "EventReadLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/EventRead.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-EventRead",
        "Handler": "EventRead/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 1,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3"
        ]
      },
      "DependsOn": [
        "EventReadLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "EventReadLambdaVersionkN7qYeFksB5nrau25Xoty69Vfob6gdYMDgC8sbQjxU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EventReadLambdaFunction"
        },
        "CodeSha256": "UYUKEpmB+uYWT2Ru+8sICnmVQPaJQJV31zd/AWcc+pI="
      }
    },
    "EventReadAllLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/EventReadAll.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-EventReadAll",
        "Handler": "EventReadAll/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 1,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3"
        ]
      },
      "DependsOn": [
        "EventReadAllLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "EventReadAllLambdaVersionX2hiiKyz0hKTflIok1mcfsRgXeI1lx7CyYh3FwXI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EventReadAllLambdaFunction"
        },
        "CodeSha256": "bsT5qf91io5vD2ALqUEg0sgidn0USzO4MvymFt8Rrxg="
      }
    },
    "RoleCreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/RoleCreate.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-RoleCreate",
        "Handler": "RoleCreate/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 1,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3"
        ]
      },
      "DependsOn": [
        "RoleCreateLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "RoleCreateLambdaVersionS3I97xVGdy1zPhzR5ZFgHGo7yZ2rwxrDNALa5S98": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RoleCreateLambdaFunction"
        },
        "CodeSha256": "672Vgk//LjZeIR75im+MczL0Q9oJD79IjreoMXOLpnc="
      }
    },
    "RoleListForEventLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/RoleListForEvent.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-RoleListForEvent",
        "Handler": "RoleListForEvent/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 1,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3"
        ]
      },
      "DependsOn": [
        "RoleListForEventLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "RoleListForEventLambdaVersionQXNPrgNgbPKxBCAoywjc6iMQIXYTHrkd5ig2MPZ98o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RoleListForEventLambdaFunction"
        },
        "CodeSha256": "672Vgk//LjZeIR75im+MczL0Q9oJD79IjreoMXOLpnc="
      }
    },
    "RoleReadAllForUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/RoleReadAllForUser.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-RoleReadAllForUser",
        "Handler": "RoleReadAllForUser/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 1,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3"
        ]
      },
      "DependsOn": [
        "RoleReadAllForUserLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "RoleReadAllForUserLambdaVersionYhM4gw6HgHyNJXXpYj9Th1PLjHdmCdkrPwj5Ybwc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RoleReadAllForUserLambdaFunction"
        },
        "CodeSha256": "672Vgk//LjZeIR75im+MczL0Q9oJD79IjreoMXOLpnc="
      }
    },
    "UserCreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/UserCreate.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-UserCreate",
        "Handler": "UserCreate/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3",
          "arn:aws:lambda:us-east-1:935952531494:layer:bcrypt-layer:3"
        ]
      },
      "DependsOn": [
        "UserCreateLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UserCreateLambdaVersiontCrzlhVAATzIrDOiWsNNbUVUpshEwXJNva6nElcoQw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UserCreateLambdaFunction"
        },
        "CodeSha256": "R/AqWY4iMO4LHznjgUhZYsScWL7qaUprBH9S5McPG4o="
      }
    },
    "UserLoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/UserLogin.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-UserLogin",
        "Handler": "UserLogin/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3",
          "arn:aws:lambda:us-east-1:935952531494:layer:bcrypt-layer:3"
        ]
      },
      "DependsOn": [
        "UserLoginLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UserLoginLambdaVersionghuKWf9gL1hsuq87QD3t4dtZjSiFwLGxwgANarOvLDY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UserLoginLambdaFunction"
        },
        "CodeSha256": "maqLyGUCCkPXANAMY7hY3BdGq6qSqLt1FFzBDn/EVcY="
      }
    },
    "UserReadLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ChurchAppAPI/dev/1605764320629-2020-11-19T05:38:40.629Z/UserRead.zip"
        },
        "FunctionName": "ChurchAppAPI-dev-UserRead",
        "Handler": "UserRead/index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 1,
        "Environment": {
          "Variables": {
            "PGDATABASE": "postgres",
            "PGHOST": "database-1.cbnw6nneqhcp.us-east-1.rds.amazonaws.com",
            "PGPASSWORD": "demo12345",
            "PGPORT": 5432,
            "PGUSER": "postgres"
          }
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:935952531494:layer:node-pg:3"
        ]
      },
      "DependsOn": [
        "UserReadLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UserReadLambdaVersiondyghPlCgQnB7H3DTatmfnqgyAWd4rCyOjKsdN4eCTY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UserReadLambdaFunction"
        },
        "CodeSha256": "KL5yaQ6s1m/7H6HKgB8tuo9+grtPst/VZ0KKZDOHdzQ="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-ChurchAppAPI",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceEvent": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "event",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEventCreate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEvent"
        },
        "PathPart": "create",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEventIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEvent"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEventReadall": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEvent"
        },
        "PathPart": "readall",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEventRole": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEvent"
        },
        "PathPart": "role",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEventRoleRead": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEventRole"
        },
        "PathPart": "read",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEventRoleReadUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEventRoleRead"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRole": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "role",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRoleCreate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceRole"
        },
        "PathPart": "create",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRoleList": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceRole"
        },
        "PathPart": "list",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRoleListEventidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceRoleList"
        },
        "PathPart": "{eventId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserCreate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "create",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserRead": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "read",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserReadUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserRead"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventCreateOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventCreate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventCreatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventCreate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "EventCreateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodEventIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.id": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "EventReadLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodEventReadallGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventReadall"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "EventReadAllLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodRoleCreatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRoleCreate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RoleCreateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodRoleListEventidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.eventId": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceRoleListEventidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RoleListForEventLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodEventRoleReadUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.username": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventRoleReadUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RoleReadAllForUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodUserCreatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserCreate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UserCreateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodUserLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UserLoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodUserReadUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.username": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserReadUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UserReadLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1605764319314": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodEventCreateOptions",
        "ApiGatewayMethodEventCreatePost",
        "ApiGatewayMethodEventIdVarGet",
        "ApiGatewayMethodEventReadallGet",
        "ApiGatewayMethodRoleCreatePost",
        "ApiGatewayMethodRoleListEventidVarGet",
        "ApiGatewayMethodEventRoleReadUsernameVarGet",
        "ApiGatewayMethodUserCreatePost",
        "ApiGatewayMethodUserLoginPost",
        "ApiGatewayMethodUserReadUsernameVarGet"
      ]
    },
    "EventCreateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EventCreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "EventReadLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EventReadLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "EventReadAllLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EventReadAllLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RoleCreateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RoleCreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RoleListForEventLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RoleListForEventLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RoleReadAllForUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RoleReadAllForUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UserCreateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UserCreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UserLoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UserLoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UserReadLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UserReadLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "DatabaseTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DatabaseTestLambdaVersionTbZOX9PJNgazTm4l6LtOVzKJxAhCVnGqqbMY2sYR0"
      }
    },
    "EventCreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EventCreateLambdaVersionr2gNz2h0NbPbFW6PVlyQrfOek3et4QaeebQlePTtOJs"
      }
    },
    "EventReadLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EventReadLambdaVersionkN7qYeFksB5nrau25Xoty69Vfob6gdYMDgC8sbQjxU"
      }
    },
    "EventReadAllLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EventReadAllLambdaVersionX2hiiKyz0hKTflIok1mcfsRgXeI1lx7CyYh3FwXI"
      }
    },
    "RoleCreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RoleCreateLambdaVersionS3I97xVGdy1zPhzR5ZFgHGo7yZ2rwxrDNALa5S98"
      }
    },
    "RoleListForEventLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RoleListForEventLambdaVersionQXNPrgNgbPKxBCAoywjc6iMQIXYTHrkd5ig2MPZ98o"
      }
    },
    "RoleReadAllForUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RoleReadAllForUserLambdaVersionYhM4gw6HgHyNJXXpYj9Th1PLjHdmCdkrPwj5Ybwc"
      }
    },
    "UserCreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UserCreateLambdaVersiontCrzlhVAATzIrDOiWsNNbUVUpshEwXJNva6nElcoQw"
      }
    },
    "UserLoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UserLoginLambdaVersionghuKWf9gL1hsuq87QD3t4dtZjSiFwLGxwgANarOvLDY"
      }
    },
    "UserReadLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UserReadLambdaVersiondyghPlCgQnB7H3DTatmfnqgyAWd4rCyOjKsdN4eCTY"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}